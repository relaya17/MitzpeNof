{"ast":null,"code":"// src/store/employeesSlice.ts\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  employees: []\n};\nconst employeesSlice = createSlice({\n  name: 'employees',\n  initialState,\n  reducers: {\n    addEmployee: (state, action) => {\n      state.employees.push(action.payload);\n    },\n    removeEmployee: (state, action) => {\n      state.employees = state.employees.filter(employee => employee.id !== action.payload);\n    },\n    updateEmployeeHours: (state, action) => {\n      const {\n        id,\n        hours\n      } = action.payload;\n      const employee = state.employees.find(employee => employee.id === id);\n      if (employee) {\n        employee.hoursWorked = hours; // עדיין מעדכן ב-hoursWorked\n      }\n    }\n  }\n});\nexport const {\n  addEmployee,\n  removeEmployee,\n  updateEmployeeHours\n} = employeesSlice.actions;\nexport default employeesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","employees","employeesSlice","name","reducers","addEmployee","state","action","push","payload","removeEmployee","filter","employee","id","updateEmployeeHours","hours","find","hoursWorked","actions","reducer"],"sources":["C:/Users/ארלט/Documents/Visual Studio 2022/MitzpeNof/MitzpeNof/MyNewProject/client/src/redux/slice/employeesSlice.ts"],"sourcesContent":["// src/store/employeesSlice.ts\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface Employee {\r\n  id: string;\r\n  name: string;\r\n  role: string;\r\n  hoursWorked: number;  // הוספתי את השדה hoursWorked\r\n}\r\n\r\ninterface EmployeesState {\r\n  employees: Employee[];\r\n}\r\n\r\nconst initialState: EmployeesState = {\r\n  employees: [],\r\n};\r\n\r\nconst employeesSlice = createSlice({\r\n  name: 'employees',\r\n  initialState,\r\n  reducers: {\r\n    addEmployee: (state, action: PayloadAction<Employee>) => {\r\n      state.employees.push(action.payload);\r\n    },\r\n    removeEmployee: (state, action: PayloadAction<string>) => {\r\n      state.employees = state.employees.filter(employee => employee.id !== action.payload);\r\n    },\r\n    updateEmployeeHours: (state, action: PayloadAction<{ id: string, hours: number }>) => {\r\n      const { id, hours } = action.payload;\r\n      const employee = state.employees.find(employee => employee.id === id);\r\n      if (employee) {\r\n        employee.hoursWorked = hours;  // עדיין מעדכן ב-hoursWorked\r\n      }\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport const { addEmployee, removeEmployee, updateEmployeeHours } = employeesSlice.actions;\r\nexport default employeesSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAa7D,MAAMC,YAA4B,GAAG;EACnCC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,cAAc,GAAGH,WAAW,CAAC;EACjCI,IAAI,EAAE,WAAW;EACjBH,YAAY;EACZI,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAA+B,KAAK;MACvDD,KAAK,CAACL,SAAS,CAACO,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACtC,CAAC;IACDC,cAAc,EAAEA,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MACxDD,KAAK,CAACL,SAAS,GAAGK,KAAK,CAACL,SAAS,CAACU,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAAC;IACtF,CAAC;IACDK,mBAAmB,EAAEA,CAACR,KAAK,EAAEC,MAAoD,KAAK;MACpF,MAAM;QAAEM,EAAE;QAAEE;MAAM,CAAC,GAAGR,MAAM,CAACE,OAAO;MACpC,MAAMG,QAAQ,GAAGN,KAAK,CAACL,SAAS,CAACe,IAAI,CAACJ,QAAQ,IAAIA,QAAQ,CAACC,EAAE,KAAKA,EAAE,CAAC;MACrE,IAAID,QAAQ,EAAE;QACZA,QAAQ,CAACK,WAAW,GAAGF,KAAK,CAAC,CAAE;MACjC;IACF;EAEF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV,WAAW;EAAEK,cAAc;EAAEI;AAAoB,CAAC,GAAGZ,cAAc,CAACgB,OAAO;AAC1F,eAAehB,cAAc,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}