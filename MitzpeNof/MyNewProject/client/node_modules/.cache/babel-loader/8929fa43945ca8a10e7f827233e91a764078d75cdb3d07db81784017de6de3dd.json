{"ast":null,"code":"// src/redux/slices/paymentSlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// הגדרת מצב התשלום\n\n// הגדרת ערך ברירת המחדל של התשלום\nconst initialState = {\n  payer: '',\n  amount: 100,\n  cardNumber: '',\n  expiryDate: '',\n  cvv: '',\n  status: 'idle',\n  receipt: null\n};\n\n// קריאת API אסינכרונית להוספת תשלום\nexport const addPayment = createAsyncThunk('payment/addPayment', async (paymentData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post('http://localhost:5000/api/payments', paymentData);\n    return response.data; // מחזיר את התגובה מהשרת (תשלום + קבלה)\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return rejectWithValue(error.response.data);\n    }\n    return rejectWithValue('Error adding payment');\n  }\n});\nconst paymentSlice = createSlice({\n  name: 'payment',\n  initialState,\n  reducers: {\n    setPaymentDetails: (state, action) => {\n      return {\n        ...state,\n        ...action.payload\n      };\n    },\n    clearPaymentDetails: () => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(addPayment.pending, state => {\n      state.status = 'loading'; // התחלת הטעינה\n    }).addCase(addPayment.fulfilled, (state, action) => {\n      state.status = 'succeeded'; // סיום בהצלחה\n      state.receipt = action.payload.receipt; // שמירת הקבלה שהתקבלה מהשרת\n    }).addCase(addPayment.rejected, (state, action) => {\n      state.status = 'failed'; // סיום עם שגיאה\n      console.error('Payment error:', action.payload);\n    });\n  }\n});\nexport const {\n  setPaymentDetails,\n  clearPaymentDetails\n} = paymentSlice.actions;\nexport default paymentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","payer","amount","cardNumber","expiryDate","cvv","status","receipt","addPayment","paymentData","rejectWithValue","response","post","data","error","isAxiosError","paymentSlice","name","reducers","setPaymentDetails","state","action","payload","clearPaymentDetails","extraReducers","builder","addCase","pending","fulfilled","rejected","console","actions","reducer"],"sources":["C:/Users/ארלט/Documents/Visual Studio 2022/MitzpeNof/MitzpeNof/MyNewProject/client/src/redux/slice/PaymentSlice.ts"],"sourcesContent":["// src/redux/slices/paymentSlice.ts\r\nimport { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// הגדרת מצב התשלום\r\ninterface PaymentState {\r\n  payer: string;\r\n  amount: number;\r\n  cardNumber: string;\r\n  expiryDate: string;\r\n  cvv: string;\r\n  status: 'idle' | 'loading' | 'succeeded' | 'failed'; // מצב הבקשה\r\n  receipt: string | null; // הקבלה שהתקבלה מהשרת\r\n}\r\n\r\n// הגדרת ערך ברירת המחדל של התשלום\r\nconst initialState: PaymentState = {\r\n  payer: '',\r\n  amount: 100,\r\n  cardNumber: '',\r\n  expiryDate: '',\r\n  cvv: '',\r\n  status: 'idle',\r\n  receipt: null,\r\n};\r\n\r\n// קריאת API אסינכרונית להוספת תשלום\r\nexport const addPayment = createAsyncThunk(\r\n  'payment/addPayment',\r\n  async (paymentData: PaymentState, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/payments', paymentData);\r\n      return response.data; // מחזיר את התגובה מהשרת (תשלום + קבלה)\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        return rejectWithValue(error.response.data);\r\n      }\r\n      return rejectWithValue('Error adding payment');\r\n    }\r\n  }\r\n);\r\n\r\nconst paymentSlice = createSlice({\r\n  name: 'payment',\r\n  initialState,\r\n  reducers: {\r\n    setPaymentDetails: (state, action: PayloadAction<Partial<PaymentState>>) => {\r\n      return { ...state, ...action.payload };\r\n    },\r\n    clearPaymentDetails: () => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(addPayment.pending, (state) => {\r\n        state.status = 'loading'; // התחלת הטעינה\r\n      })\r\n      .addCase(addPayment.fulfilled, (state, action) => {\r\n        state.status = 'succeeded'; // סיום בהצלחה\r\n        state.receipt = action.payload.receipt; // שמירת הקבלה שהתקבלה מהשרת\r\n      })\r\n      .addCase(addPayment.rejected, (state, action) => {\r\n        state.status = 'failed'; // סיום עם שגיאה\r\n        console.error('Payment error:', action.payload);\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setPaymentDetails, clearPaymentDetails } = paymentSlice.actions;\r\nexport default paymentSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAiBC,gBAAgB,QAAQ,kBAAkB;AAC/E,OAAOC,KAAK,MAAM,OAAO;;AAEzB;;AAWA;AACA,MAAMC,YAA0B,GAAG;EACjCC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,GAAG;EACXC,UAAU,EAAE,EAAE;EACdC,UAAU,EAAE,EAAE;EACdC,GAAG,EAAE,EAAE;EACPC,MAAM,EAAE,MAAM;EACdC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGV,gBAAgB,CACxC,oBAAoB,EACpB,OAAOW,WAAyB,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACxD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,oCAAoC,EAAEH,WAAW,CAAC;IACpF,OAAOE,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIf,KAAK,CAACgB,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAC/C,OAAOD,eAAe,CAACI,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;IAC7C;IACA,OAAOH,eAAe,CAAC,sBAAsB,CAAC;EAChD;AACF,CACF,CAAC;AAED,MAAMM,YAAY,GAAGnB,WAAW,CAAC;EAC/BoB,IAAI,EAAE,SAAS;EACfjB,YAAY;EACZkB,QAAQ,EAAE;IACRC,iBAAiB,EAAEA,CAACC,KAAK,EAAEC,MAA4C,KAAK;MAC1E,OAAO;QAAE,GAAGD,KAAK;QAAE,GAAGC,MAAM,CAACC;MAAQ,CAAC;IACxC,CAAC;IACDC,mBAAmB,EAAEA,CAAA,KAAMvB;EAC7B,CAAC;EACDwB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAClB,UAAU,CAACmB,OAAO,EAAGP,KAAK,IAAK;MACtCA,KAAK,CAACd,MAAM,GAAG,SAAS,CAAC,CAAC;IAC5B,CAAC,CAAC,CACDoB,OAAO,CAAClB,UAAU,CAACoB,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACd,MAAM,GAAG,WAAW,CAAC,CAAC;MAC5Bc,KAAK,CAACb,OAAO,GAAGc,MAAM,CAACC,OAAO,CAACf,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,CACDmB,OAAO,CAAClB,UAAU,CAACqB,QAAQ,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACd,MAAM,GAAG,QAAQ,CAAC,CAAC;MACzBwB,OAAO,CAAChB,KAAK,CAAC,gBAAgB,EAAEO,MAAM,CAACC,OAAO,CAAC;IACjD,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,iBAAiB;EAAEI;AAAoB,CAAC,GAAGP,YAAY,CAACe,OAAO;AAC9E,eAAef,YAAY,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}